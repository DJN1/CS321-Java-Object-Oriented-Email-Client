/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.uah.cs321;

import javax.swing.JOptionPane;

/**
 *
 * @author David
 */
public class ComposeEmailDialog extends javax.swing.JDialog {

	/**
	 * Creates new form CompoeseEmailDialog
	 */
	public ComposeEmailDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
                this.setLocationRelativeTo(null);
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recipientTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        subjectTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bodyTextArea = new javax.swing.JTextArea();
        sendEmailButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Compose Email");
        setPreferredSize(new java.awt.Dimension(720, 480));
        setSize(new java.awt.Dimension(720, 480));

        recipientTextField.setToolTipText("Recipient of the Email");

        jLabel1.setText("Recipient:");

        subjectTextField.setToolTipText("Recipient of the Email");

        jLabel2.setText("Subject:");

        bodyTextArea.setColumns(20);
        bodyTextArea.setRows(5);
        jScrollPane1.setViewportView(bodyTextArea);

        sendEmailButton.setBackground(new java.awt.Color(0, 255, 0));
        sendEmailButton.setText("Send Email");
        sendEmailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendEmailButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subjectTextField)
                            .addComponent(recipientTextField)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sendEmailButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recipientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendEmailButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void sendEmailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendEmailButtonActionPerformed
                // TODO add your handling code here:
                
                var subject = subjectTextField.getText();
                var recipient = recipientTextField.getText();
                var body = bodyTextArea.getText();
                var sender = SimpleEmail.getInstance().GetCurrentSite().GetCurrentUser();
                
                if (!validateFields(subject))
                {
                    JOptionPane.showMessageDialog(this, "Subject is required.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;  
                }
                else if (!validateFields(recipient))
                {
                    JOptionPane.showMessageDialog(this, "Recipient is required.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;                     
                }
                else if (!validateFields(body))
                {
                    JOptionPane.showMessageDialog(this, "Email body can not be empty.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                else
                {
                    var newlyCreatedEmail = new Email(subject, body, recipient, sender.getEmailAddress());
                    MailSender mailSender = new MailSender();
                    
                    if (!mailSender.sendMessage(sender, recipient, newlyCreatedEmail))
                    {
                        JOptionPane.showMessageDialog(this, "Email could not be sent.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;  
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "Email sent!", "Success!", JOptionPane.PLAIN_MESSAGE);
                    }
                }
               
		this.dispose();
        }//GEN-LAST:event_sendEmailButtonActionPerformed

        private boolean validateFields(Object o)
        {
            return !o.equals("");
        }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea bodyTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField recipientTextField;
    private javax.swing.JButton sendEmailButton;
    private javax.swing.JTextField subjectTextField;
    // End of variables declaration//GEN-END:variables
}
